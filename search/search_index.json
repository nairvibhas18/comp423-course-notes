{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Vibhas' Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/go-setup/","title":"Setting up a dev container for Go","text":"<ul> <li>Primary Author: Vibhas Nair</li> <li>Reviewer: Olawumi Olasunkanmi</li> </ul>"},{"location":"tutorials/go-setup/#welcome","title":"Welcome!","text":"<p>Here, you will learn how to create a simple project in the Go programming language. By the end of this tutorial, you will have created a basic Go development container and a blank repository to track changes you make to your code.</p>"},{"location":"tutorials/go-setup/#part-0-prerequisites","title":"Part 0: Prerequisites","text":"<p>Before we start, make sure you have: - A GitHub account: If you don\u2019t have one yet, sign up at GitHub.</p> <ul> <li> <p>Git Installed: Install Git if you don't already have it.</p> </li> <li> <p>Visual Studio Code (VS Code): Download and install it from here.</p> </li> <li> <p>Docker Installed: This is required to run the dev container. Install it here.</p> </li> <li> <p>Command-line basics: Basic command line interface (CLI) commands will be necessary for this tutorial. This link provides a great tutorial if you need to brush up on your basics.</p> </li> </ul>"},{"location":"tutorials/go-setup/#part-1-project-setup-creating-the-repository","title":"Part 1: Project Setup: Creating the Repository","text":""},{"location":"tutorials/go-setup/#step-1-create-a-local-directory-and-initialize-git","title":"Step 1: Create a Local Directory and Initialize Git","text":"<p>A. Open your terminal or command prompt.</p> <p>B. Create a new directory for your project: <pre><code>mkdir go-setup-tutorial\ncd go-setup-tutorial\n</code></pre> C. Initialize a new Git repository: <pre><code>git init\n</code></pre> D. Create a README.md file:  <pre><code>echo \"# Go Setup Tutorial\" &gt; README.md\ngit add README.md\ngit commit -m \"Initial commit with README\"\n</code></pre></p>"},{"location":"tutorials/go-setup/#step-2-create-a-remote-repository-on-github","title":"Step 2: Create a Remote Repository on GitHub","text":"<ol> <li>Log in to your GitHub account and navigate to the Create a New Repository page.</li> <li> <p>Fill in the details as follows:</p> <ul> <li>Repository Name: go-setup-tutorial</li> <li>Description: \"A basic tutorial for setting up a project in the Go programming language.\"</li> <li>Visibility: Public </li> </ul> <p>Warning</p> <p>Do not initialize the repository with a README, .gitignore, or license.</p> </li> <li> <p>Click Create Repository</p> </li> </ol>"},{"location":"tutorials/go-setup/#step-3-link-your-local-repository-to-github","title":"Step 3: Link your Local Repository to GitHub","text":"<ol> <li> <p>Add the GitHub repository as a remote: <pre><code>git remote add origin https://github.com/&lt;your-username&gt;/go-setup-tutorial.git\n</code></pre> Replace <code>your-username</code> with your GitHub username.</p> </li> <li> <p>Check your default branch name with the subcommand <code>git branch</code>. If it is not <code>main</code>. rename it to <code>main</code> using the <code>git branch -M main</code> command. Although <code>master</code> is used in older versions of <code>git</code>, <code>main</code> is the standard modern primary branch name.</p> </li> <li> <p>Push your local commits to the GitHub repository: <pre><code>git push --set-upstream origin main\n</code></pre></p> </li> </ol> <p>Note</p> <p>The <code>-u</code> short flag also works in the place of <code>--set-upstream</code></p> <ol> <li>In your web browser, refresh your GitHub repository to verify that the commit you made locally has been successfully pushed to the remote repository. You can run <code>git log</code> locally to view the commit ID and message, which should match the most recent commit displayed on GitHub. This confirms that your changes have been pushed to the remote repository.</li> </ol>"},{"location":"tutorials/go-setup/#part-2-setting-up-the-development-environment","title":"Part 2: Setting Up the Development Environment","text":""},{"location":"tutorials/go-setup/#what-is-a-development-dev-container","title":"What is a Development (Dev) Container?","text":"<p>A development (dev) container is a preconfigured environment designed to ensure consistency across different machines. Essentially, it's a \"mini computer\" within your computer, equipped with everything you need for a specific project\u2014such as the appropriate programming language, tools, libraries, and dependencies. Dev containers are typically set up using Docker to create isolated and reliable development environments. In the tech industry, complex projects often rely on specific tools and dependencies to function correctly. Without a dev container, each developer must manually configure their environment, which can lead to errors, inconsistencies, and wasted time. Dev containers solve this problem by providing an identical setup for everyone on the team, eliminating the infamous \"it works on my machine\" issues. They also make onboarding easier, enabling new team members to start contributing quickly with minimal setup.</p> <p>Let's create our development container:</p>"},{"location":"tutorials/go-setup/#step-1-add-development-container-configuration","title":"Step 1: Add Development Container Configuration","text":"<ol> <li>In VS Code, open the <code>go-setup-tutorial</code> directory. </li> </ol> <p>Tip</p> <p>You can do this by clicking File &gt; Open Folder. </p> <ol> <li>Install the Dev Containers extension for VS Code by searching for the one made by Microsoft in the extensions tab of VS Code.</li> <li>Create a hidden <code>.devcontainer</code> configuration directory in the root of your project with this file inside of it: <code>.devcontainer/devcontainer.json</code></li> <li>Specify environment variables: Inside the <code>devcontainer.json</code> file we need to specify the configuration of our development environment:<ul> <li>name: Specify a descriptive name for your dev container  (i.e. \"Go Dev Container\")</li> <li>image: We will use the latest version of a Go environment, but if you would like to create your own or check out other base images for other language environments, you can click this link.  </li> <li>customizations: Here we can add useful configurations to VS Code like the Go extension made by Google found in the Extensions marketplace. By adding extensions here, we can make sure that other who work on this project have these extensions installed in their dev containers automatically. </li> <li>postCreateCommand: Once the dev container is created, we will run the command defined by postCreateCommand. For us, since this is a simple project, we don't have any necessary dependencies so we will just run <code>go version</code> to output the version of Go we have. </li> </ul> </li> </ol> <p>A Note on Dependencies</p> <p>This simple project currently doesn't have any dependencies that we would need to install, but if we did, we would need to create a Go dependency configuration file, like <code>requirements.txt.</code> which would be created in the root directory, that would list all of the dependencies we would need for the project. We would then need to install these dependencies after the dev container is created by specifying a command in the <code>postCreateCommand</code> variable. </p> <pre><code>{\n  \"name\": \"Go Dev Container\",\n  \"image\": \"mcr.microsoft.com/vscode/devcontainers/go:latest\",\n  \"customizations\": {\n    \"vscode\": {\n      \"settings\": {},\n      \"extensions\": [\"golang.go\"]\n    }\n  },\n  \"postCreateCommand\": \"go version\"\n}\n</code></pre>"},{"location":"tutorials/go-setup/#step-2-reopen-the-project-in-a-vs-code-dev-container","title":"Step 2: Reopen the Project in a VS Code Dev Container","text":"<p>Reopen the project in the container by pressing Ctrl+Shift+P (or Cmd+Shift+P on Mac), searching for \"Dev Containers: Reopen in Container,\" and selecting the option. The setup process may take a few minutes as the Docker image is downloaded. After the dev container setup is complete, close the current terminal tab by clicking the trash can icon, then open a new terminal pane within VS Code to begin working.</p>"},{"location":"tutorials/go-setup/#part-3-running-your-first-program-in-go","title":"Part 3: Running Your First Program in Go","text":""},{"location":"tutorials/go-setup/#step-1-enable-dependency-tracking-for-your-code","title":"Step 1: Enable Dependency Tracking for Your Code","text":"<p>When your code relies on packages from other modules, you manage those dependencies through your project's own module. This module is defined by a <code>go.mod</code> file, which keeps track of the modules that provide those packages. The <code>go.mod</code> file is stored alongside your code and is included in your source code repository. To enable dependency tracking and create a <code>go.mod</code> file for your project, run the <code>go mod init</code> command and provide the name of your module. This name will serve as the module's path. For the purposes of this tutorial, we will just use <code>example/hello423</code>: <pre><code>go mod init example/hello423\n</code></pre></p> <p>Note</p> <p>In practice, the module path is usually the repository location where your source code will be hosted. For example, a typical module path might look like <code>github.com/mymodule</code>. If you intend to make your module available for others to use, the module path must point to a location that Go tools can access to download your module. For our case, however, we will just use e<code>xample/hello423</code> to demonstrate a simple example.</p>"},{"location":"tutorials/go-setup/#step-2-create-a-go-file-and-paste-code","title":"Step 2: Create a Go File and Paste Code","text":"<p>Create a file in VS Code called <code>hello423.go</code> to write your code. Next, paste the following code into your <code>hello423.go</code> file and save the file: <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello COMP423!\")\n}\n</code></pre></p>"},{"location":"tutorials/go-setup/#step-3-run-your-code","title":"Step 3: Run Your Code","text":"<p>Run your code using this command: <pre><code>go run .\n</code></pre> The output should be: Hello COMP423!</p> <p>Alternatively, you can use <code>go build</code> to compile your code and run the generated binary executable file, in this case <code>./hello.go</code>, at any time:  <pre><code>go build hello.go\n./hello.go\n</code></pre> The output should similarly be: Hello COMP423!</p> <p><code>go run</code> vs. <code>go build</code></p> <p><code>go run</code> compiles and executes your Go code in a specified file. This compilation happens in a temporary location, and the resulting executable is not saved. This makes <code>go run</code> ideal for testing small programs, quick iterations, or learning Go, as it avoids creating unnecessary binary files.</p> <p><code>go build</code> compiles the Go code and its dependencies, producing a binary executable file in the current directory. Unlike <code>go run</code>, <code>go build</code> does not execute the code. It is useful for creating permanent, reusable executables for applications or projects that need to be run repeatedly or distributed. The output file allows you to run the program later without recompiling the source code.</p>"},{"location":"tutorials/go-setup/#step-4-add-your-changes-to-vs-code","title":"Step 4: Add Your Changes to VS Code","text":"<ol> <li>Stage and commit your changes to your remote repository on GitHub: <pre><code>git add . \ngit commit -m \"Hello423 Code\"\n</code></pre></li> <li>Push your changes:  <pre><code>git push origin main\n</code></pre></li> </ol>"},{"location":"tutorials/go-setup/#conclusion","title":"Conclusion","text":"<p>Congratulations! If you've made it this far, then you have a working development environment in Go and have run some simple code in VS Code. This skill can be applied to other languages as well, and is common practice in professional settings and open source projects.  </p>"}]}